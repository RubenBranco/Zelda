version: "3.6"
services:
  nginx:
    image: zelda-nginx:latest
    networks:
      zelda: {}
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.nginx_host == True
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ~/certbot/etc/letsencrypt:/etc/letsencrypt:rw
      - ~/certbot/var/www/certbot:/var/www/certbot:rw
      - ~/nginx/logs/zelda:/zelda/logs:rw
      - ~/zelda/static:/zelda/static:ro
      - ~/zelda_s3/data:/zelda/s3:ro
  zelda:
    image: zelda:latest
    networks:
      zelda: {}
    deploy:
      replicas: ${DJANGO_REPLICAS}
      restart_policy:
        condition: on-failure
    depends_on:
      - cache
      - postgres
    volumes:
      - ~/zelda/data:/zelda/data:rw
      - ~/zelda/logs:/zelda/logs:rw
      - ~/zelda/static:/zelda/static:rw
      - ~/zelda/backups:/zelda/backups:rw
    env_file:
      - docker.env
  zelda_s3:
    image: zelda_s3:latest
    networks:
      zelda: {}
    deploy:
      replicas: ${DJANGO_S3_REPLICAS}
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.primary_node == True
    volumes:
      - ~/zelda_s3/logs:/zelda_s3/logs:rw
      - ~/zelda_s3/data:/zelda_s3/data:rw
  rabbitmq:
    image: rabbitmq:latest
    networks:
      zelda: {}
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    environment:
      - RABBITMQ_DEFAULT_USER=zelda
      - RABBITMQ_DEFAULT_PASS=zelda2019
  cache:
    image: memcached:latest
    networks:
      zelda: {}
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.primary_node == True
  certbot:
    image: zelda-certbot:latest
    networks:
      zelda: {}
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.primary_node == True
    volumes:
      - ~/certbot/etc/letsencrypt:/etc/letsencrypt:rw
      - ~/certbot/var/www/certbot:/var/www/certbot:rw
  cert_mgmt:
    image: cert-mgmt:latest
    networks:
      zelda: {}
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.primary_node == True
    volumes:
      - ~/certbot/var/www/certbot:/var/www/certbot:rw
      - ~/cert_mgmt/mgmt/logs:/mgmt/logs:rw
  cert_sync:
    image: cert-sync:latest
    networks:
      zelda: {}
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.nginx_host == True
          - node.hostname != pti-ptr-1
    volumes:
      - ~/certbot/etc/letsencrypt:/etc/letsencrypt:rw
  postgres:
    image: zelda-postgres:latest
    networks:
      zelda: {}
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.postgres_host == True
    volumes:
      - ~/postgres/var/lib/postgresql/data:/var/lib/postgresql/data:rw
    env_file:
      - docker.env
  postgres_slave:
    image: zelda-postgres-slave:latest
    networks:
      zelda: {}
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.postgres_slave == True
    volumes:
      - ~/postgres/var/lib/postgresql/data:/var/lib/postgresql/data:rw
    env_file:
      - docker.env
  portainer:
    image: portainer/portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ~/portainer/data:/data:rw
      - ~/certbot/etc/letsencrypt/:/certs:rw
    command: --admin-password "$$2y$$05$$ychP0ktGYkWyojgBDLBa5.FvodZBCsqGT1nV1LnbnE2CPq4myWlqW" --ssl --sslcert "/certs/live/zelda-edu.me/fullchain.pem" --sslkey "/certs/live/zelda-edu.me/privkey.pem"
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.primary_node == True
    ports:
      - "9000:9000"
    networks:
      zelda: {}
networks:
  zelda: {}
